<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="org.zerock.mapper.BoardMapper"> 

	<select id="getList" resultType="org.zerock.domain.BoardVO">
		<![CDATA[
		SELECT * FROM tbl_board WHERE bno > 0 ORDER BY bno DESC  
		]]><!--  <![CDATA[ SQL문 ]]>   이 C데이터를 사용하는 이유는 bno > 0 처럼 >가 있어서이다.. 정렬은 인덱스... 써도된당.. mysql 은 안됨..-->
	</select>
	
	 <!-- insert만 처리되고 생성된 PK값을 알 필요가 없는 경우 : 게시판 등록시 업데이트된다. -->
	<insert id="insert">	
		insert into tbl_board (bno, title, content, writer, ip)
		values(seq_board.nextval, #{title}, #{content}, #{writer}, #{ip})
	</insert>
	
	<!-- insert문이 실행되고 생성된 PK값을 알아야하는 경우 -->
	<insert id="insertSelectKey"> <!--  5. IP주소도 업데이트하자 -->
		<!-- @SelectKey라는 MyBatis의 어노테이션을 이용하여 PK값을 미리(before) SQL을 통해서 처리하고 특정 이름(bno)으로 보관하는 방식이다. -->
		<selectKey keyProperty="bno" order="BEFORE" resultType="long">
			SELECT seq_board.nextval FROM dual
		</selectKey>	
		INSERT INTO tbl_board (bno, title, content, writer, ip)
		VALUES (#{bno}, #{title}, #{content}, #{writer}, #{ip})
	</insert>
	
	
	<!-- READ(SELECT) 처리 -->
	<select id="read" resultType="org.zerock.domain.BoardVO">
		SELECT * FROM tbl_board WHERE bno = #{bno}
	</select>
	
	<!-- DELETE 처리 -->
	<delete id="delete" >
		DELETE tbl_board WHERE bno = #{bno}
	</delete>
	
	<!-- UPDATE 처리 -->
	<update id="update" >
		UPDATE tbl_board
		SET title = #{title},
			content = #{content},
			writer = #{writer},
			updateDate = sysdate
		WHERE bno = #{bno}
	</update>
	
	<!--  페이징처리 -->
<!-- 
	<select id="getListWithPaging" resultType="org.zerock.domain.BoardVO">
		<![CDATA[
			SELECT bno, title, content, writer, regdate, updatedate
			FROM (
				SELECT /*+INDEX_DESC(tbl_board pk_board)*/
							rownum rn, bno, title, content, writer, regdate, updatedate
				FROM tbl_board
				WHERE
		]]>
-->
		<!-- prefix : 실행될 쿼리의 <trim>문 안의 쿼리 가장 "앞" 에 붙여준다! -->
		<!-- suffix : 실행될 쿼리의 <trim>문 안의 쿼리 가장 "뒤" 에 붙여준다! -->
		<!-- prefixOverrides : 실행될 쿼리의 <trim>문 안의 쿼리 가장 뒤에 해당하는 문자가 있으면 자동으로 지운다. -->
		<!-- 2. 여기서 맨 앞에 생성되는 OR을 지운다!  -->
<!-- 
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<foreach item='type' collection="typeArr">
 -->
 				<!-- 1. 여기서 OR title.. OR content .. OR writer .. 와 같은 구문을 만들고..  -->
<!-- 
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%' || #{keyword} || '%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%' || #{keyword} || '%'
						</when>
						<when test="type == 'W'.toString()">
							writer like '%' || #{keyword} || '%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
		
		<![CDATA[
				rownum <= (#{pageNum} * #{amount})
			)
			WHERE rn > ((#{pageNum} - 1) * #{amount})
		]]>
	</select>
-->
	
	<!--  위 페이징처리 부분을 검색을 위해 sql문 을 따로 나눠서 include 해줬다. -->
	
	<!-- 목록과 데이터 개수 처리 -->
	<sql id="criteria">
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<foreach item="type" collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type=='T'.toString()">
							title LIKE '%' || #{keyword} || '%'
						</when>
						<when test="type=='C'.toString()">
							content LIKE '%' || #{keyword} || '%'
						</when>
						<when test="type=='W'.toString()">
							writer LIKE '%' || #{keyword} || '%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>
	
	<!-- 4. 댓글 수 처리를 위해 replyCnt 컬럼도 가져오도록, SELET 문에 각각 replycnt 넣어주기 -->
	<select id="getListWithPaging" resultType="org.zerock.domain.BoardVO">
		<![CDATA[
			SELECT
				bno, title, content, writer, regdate, updatedate, replycnt, hit
			FROM
				(
					SELECT /*+INDEX_DESC(tbl_board pk_board)*/
						rownum rn, bno, title, content, writer, regdate, updatedate, replycnt, hit
					FROM tbl_board
					WHERE
		]]>
		<include refid="criteria"></include>
		<![CDATA[
				rownum <= ${pageNum} * #{amount}
			)
			WHERE rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	
	<!-- 실제 DB에 잇는 게시물 수 구하기 -->
	<select id="getTotalCount" resultType="int">
			SELECT count(*)
			FROM tbl_board
			WHERE
		<include refid="criteria"></include>
			bno > 0
	</select>
	
	<!-- 3. 댓글 수 처리를 위해 replyCnt 컬럼이 추가되어야 하므로 SQL 문 추가 -->
	<select id="updateReplyCnt">
		UPDATE tbl_board SET replycnt = replycnt + #{amount} WHERE bno = #{bno}
	</select>
	
	
	<!-- 3. updateHitCnt SQL 문 추가하기  -->
	<select id="updateHitCnt">
		UPDATE tbl_board SET hit = NVL(hit, 0) + 1 WHERE bno = #{bno}
	</select>
	
</mapper>