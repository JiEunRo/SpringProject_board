<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">
	
	<!-- error-page를 리다이렉트하기 위해 : customAccessDenied 를 빈으로 등록했다. -->
	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeinedHandler"></bean>
	
	<!-- 로그인 시 특정페이지 이동을 하기위해 : customLoginsuccess 빈 등록 -->
	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>
	<!-- 
		p.711
		이전 프로젝트에서는 로그인 성공 후에 customLoginSuccesshandler 를 이용해서 사용자 권한에 따라 이동하게 했다..
		SavedRequestAwrareAtuthenticationSuccessHandler 클래스를 이용해서 사용자가 원래 보려고 했던 페이지의 정보를 유지해서 로그인시 다시 원했던 페이지로 이동하게 한다.. 
		이 클래스는  xml 이나 java설정에서 진행하며 .. 하단 <security:form-login>에서  authentication-success-handler-ref 에서 설정한다.
		
		하지만 ex07에서는 게시물작성(/board/register)시 로그인 페이지로 이동하고, 로그인 후 다시 게시물의 작성페이지로 이동하도록 할것이다.
		<security:form-login>에서 authentication-success-handler-ref을 지우고 작업하자!
	-->
	
	
	
	<!-- 비밀번호 인코딩(암호화)하기 위해 : CustomerNoOpPasswordEncoder 등록 -->
	<!-- <bean id="customerPasswordEncoder" class="org.zerock.security.CustomerNoOpPasswordEncoder"></bean> //비밀번호 를 그대로 보여준다. -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> <!-- 비밀번호를 암호화하고 복호화는 안된다 -->
	
	<!-- 사용자의 자세한 정보를 이용하기 위해.. : customUserDetailsSerivce 클래스를 스프링의 빈으로 등록-->
	<!-- UserDetailsService 인터페이스를 구현해서 만든 클래스를 customUserDetailsService 라는 이름으로 Bean 등록 -->
	<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>
	
	
	<security:http>
	
		<!-- 특정한 URL 에 접근 할 경우 인터셉터를 이용해서 접근을 제한하는 설정은 <security:intercept-url>을 이용한다. -->
		<security:intercept-url pattern="/sample/all" access="permitAll" /><!-- <security:intercept-url> 는 pattern="uri의 패턴" access="권한 체크" 속성이 필요하다. -->
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" /><!-- /sample/member 는 ROLE_MEMBER 권한이 있는 사용자만 접근 가능! -->
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MANAGER')" />
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" /><!-- /sample/admin 에 대한 접근을 설정했고 -->
		
		<!-- 에러페이지 지정 -->
		<!-- 리다이렉트를 하지 않으면 http://localhost:8080/sample/admin 으로 뜨면서 오류가 난다. -->
		<!-- <security:access-denied-handler error-page="/accessError" /> -->
		
		<!-- 접근 제한에 대한 다양한 처리를 위해 customAccessDenied 클래스를 만들었고, 리다이렉트하는 방식으로 동작하기로 했다.
			 그래서 error-pageg 속성대신에 위에서 처럼 빈으로 등록해서 사용한다.
			 <security:access-denied-handler> 는 error-page 나 ref 둘 중 하나를 사용한다..  -->
		<!-- 리다이렉트하면 주소가 : http://localhost:8080/accessError 가 된다.  -->
		<security:access-denied-handler  ref="customAccessDenied"></security:access-denied-handler>
		
		
		<!-- 기본 제공 로그인 페이지 -->
		<!-- <security:form-login/> -->
		<!-- 사용자가 직접 만든 로그인페이지로 접속할 수 있도록 지정 -->
		<!-- 로그인 시 특정 페이지 이동을 위한.. 핸들러 설정 -->
		<!-- <security:form-login login-page="/customLogin"  authentication-success-handler-ref="customLoginSuccess" /> -->
		<security:form-login login-page="/customLogin" />
		
		<!-- 로그아웃 처리 후 직접 로직을 처리할 수 있는 핸들러 등록 -->
		<security:logout delete-cookies="remember-me, JSESSION_ID" logout-url="/customLogout" invalidate-session="true"  logout-success-url="/customLogin?logout" />
		
		<!-- 자동로그인 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>	<!-- 7일간 유지 60*60*24*7-->
		
		
	</security:http>
	
	
	
	
	
	<!-- 인증매니저 -->
	<security:authentication-manager>
		
		<!-- 단순히 로그인이 처리되는 것을 확인하기 위해 메모리상에 문자열을 정하고 이를 기준으로 동작하도록 설정했다. -->
		<!-- 인증과 권한에 대한 처리는 UserDetailsService 를 이용하지만 XML에서는 아래와 같이 지정할 수 있다. -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
		<!-- 유저 정보를 가져오는 클래스를 설정했다. customUserDetailsService는 Bean으로 등록한 클래스를 뜻한다. -->
			
			<!-- 지정된 사용자로 이용하는 방식 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource"/> -->
			<!--  데이터베이스에 저장된 사용자(테이블 구조)를 이용하는 방식 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource" 
													users-by-username-query="SELECT userid, userpw, enabled FROM tbl_member WHERE userid = ?"
													authorities-by-username-query="SELECT userid, auth FROM tbl_member_auth WHERE userid = ? "/>
			 -->
			 
			 
			<!-- 비밀번호를 암호화하기 위해서.. 비밀번호를 그대로 사용하는 CustomNoOpPasswordEncoder 는 사용하지 않는다.. -->
			<!-- <security:password-encoder ref="customerPasswordEncoder" /> -->
			<!-- 비밀번호 암호화하기 위해 우리는 BcryptPasswordEncoder 를 사용할 것이고 스프링시큐리티에 기본 포함 되어 있다. -->
			<security:password-encoder ref="bcryptPasswordEncoder"/>
			
			<!-- 
			<security:user-service>
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER" /> //스프링 시큐리티 5버전 부터 PasswordEncoding 을 해야하낟.. 패스워드 앞에 {noop} 넣기..
				<security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN, ROLE_MEMBER" />  //admin계정은 admin 과 member 둘다를 가진다.
			</security:user-service>
			 -->
		</security:authentication-provider>
		
	</security:authentication-manager>
	
</beans>
